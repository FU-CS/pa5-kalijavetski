/*
 * This source file was generated by the Gradle 'init' task
 */
package pa5;

import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

class BinaryTreeArrayTest {
    @Test
    void testInsert(){
        BinaryTreeArray tree = new BinaryTreeArray(10);
        tree.insert(1);
        tree.insert(2);
        tree.insert(3);
        tree.insert(4);
        tree.insert(5);
        tree.insert(6);
        tree.insert(7);
        tree.insert(8);
        tree.insert(9);
        tree.insert(10);
        assertEquals("1 2 3 4 5 6 7 8 9 10", tree.levelOrder());
    }

    @Test
    void testInOrder(){
        BinaryTreeArray tree = new BinaryTreeArray(7);
        tree.insert(1);
        tree.insert(2);
        tree.insert(3);
        tree.insert(4);
        tree.insert(5);
        tree.insert(6);
        tree.insert(7);
        assertEquals("4 2 5 1 6 3 7", tree.inOrder());
    }

    @Test
    void testpreOrder(){
        BinaryTreeArray tree = new BinaryTreeArray(7);
        tree.insert(1);
        tree.insert(2);
        tree.insert(3);
        tree.insert(4);
        tree.insert(5);
        tree.insert(6);
        tree.insert(7);
        assertEquals("1 2 4 5 3 6 7", tree.preOrder());
    }

    @Test
    void testpostOrder(){
        BinaryTreeArray tree = new BinaryTreeArray(7);
        tree.insert(1);
        tree.insert(2);
        tree.insert(3);
        tree.insert(4);
        tree.insert(5);
        tree.insert(6);
        tree.insert(7);
        assertEquals("4 5 2 6 7 3 1", tree.postOrder());
    }

    @Test
    void longestPath(){
        BinaryTreeArray tree = new BinaryTreeArray(7);
        tree.insert(1);
        tree.insert(2);
        tree.insert(3);
        tree.insert(4);
        tree.insert(5);
        tree.insert(6);
        tree.insert(7);
        assertEquals(4, tree.longestPath());
    }

    @Test
    void testDelete(){
        BinaryTreeArray tree = new BinaryTreeArray(7);
        tree.insert(1);
        tree.insert(2);
        tree.insert(3);
        tree.insert(4);
        tree.insert(5);
        tree.insert(6);
        tree.insert(7);
        tree.delete(4);
        assertEquals("1 2 3 5 6 7", tree.levelOrder());
    }

    @Test
    void testIns_Del(){
        BinaryTreeArray tree = new BinaryTreeArray(7);
        tree.insert(1);
        tree.insert(2);
        tree.insert(3);
        tree.insert(4);
        tree.insert(5);
        tree.insert(6);
        tree.insert(7);
        tree.delete(4);
        tree.insert(4);
        assertEquals("1 2 3 5 6 7 4", tree.levelOrder());
    }

    @Test
    void testDel_not(){
        BinaryTreeArray tree = new BinaryTreeArray(7);
        tree.insert(1);
        tree.insert(2);
        tree.insert(3);
        tree.insert(4);
        tree.insert(5);
        tree.insert(6);
        tree.insert(7);
        tree.delete(10);
        assertEquals("1 2 3 4 5 6 7", tree.levelOrder());
    }

    @Test
    void testEmpty_InOrder(){
        BinaryTreeArray tree = new BinaryTreeArray(7);
        assertEquals("", tree.inOrder());
    }
    @Test
    void testEmpty_levelOrder(){
        BinaryTreeArray tree = new BinaryTreeArray(7);
        assertEquals("", tree.levelOrder());
    }
    @Test
    void testEmpty_preOrder(){
        BinaryTreeArray tree = new BinaryTreeArray(7);
        assertEquals("", tree.preOrder());
    }
    @Test
    void testEmpty_postOrder(){
        BinaryTreeArray tree = new BinaryTreeArray(7);
        assertEquals("", tree.postOrder());
    }

    @Test
    void testDel_every(){
        BinaryTreeArray tree = new BinaryTreeArray(7);
        tree.insert(1);
        tree.insert(2);
        tree.insert(3);
        tree.delete(1);
        tree.delete(2);
        tree.delete(3);
        assertEquals("", tree.levelOrder());
    }
}
